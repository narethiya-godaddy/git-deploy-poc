---
name: 'Deploy Repository via rsync'
description: 'A custom action to deploy a repository to a remote server using rsync.'

inputs:
  remote_host:
    description: 'The remote host (IP or domain)'
    required: true
  ssh_user:
    description: 'The SSH username'
    required: true
  ssh_private_key:
    description: 'SSH Server private key'
    required: true
  source_path:
    description: 'Path to the repository checkout.'
    required: false
    default: '.'
  deployment_dest:
    description: 'Path to a specific directory to deploy instead of the entire repository, leave blank for whole repository deployment.'
    required: false
    default: '.'
  post_deploy_commands:
    description: 'Commands to execute on the server after the deployment is complete.'
    required: false
    default: ''
  cleanup_deleted_files:
    description: 'Delete files from the server that have been removed from the repository.'
    required: false
    default: true
    options:
      - "yes"
      - "no"
  enable_health_check:
    description: 'Check WordPress health after deployment and roll back if it fails. Disable to skip this step.'
    required: false
    default: "yes"
    options:
      - "yes"
      - "no"

runs:
  using: 'composite'
  steps:
    - name: Create Env variables
      id: config
      shell: bash
      run: |
        sudo apt-get update -q && sudo apt-get install -y rsync sshpass

        mkdir -p ~/.ssh output
        ssh-keyscan -H "${{ inputs.remote_host }}" >> ~/.ssh/known_hosts

        ACTION_PATH="${{ github.action_path }}"
        TAG_NAME=$(basename "$ACTION_PATH")
        echo "ACTION_TAG=$TAG_NAME" >> $GITHUB_ENV
        echo "Tag name: $TAG_NAME"
        echo "::set-output name=ACTION_TAG::$TAG_NAME"
        
        CHECKOUT_DIR=${{ inputs.source_path }}
        CHECKOUT_DIR="${CHECKOUT_DIR#/}" # Remove leading slash
        CHECKOUT_DIR="${CHECKOUT_DIR%/}" # Remove trailing slash
        echo "CHECKOUT_DIR=$CHECKOUT_DIR" >> $GITHUB_ENV
        echo "CHECKOUT_DIR: $CHECKOUT_DIR"

        DEST_DIR=${{ inputs.deployment_dest }}
        DEST_DIR="${DEST_DIR#/}" # Remove leading slash
        DEST_DIR="${DEST_DIR%/}" # Remove trailing slash
        echo "DEST_DIR=$DEST_DIR" >> $GITHUB_ENV
        echo "DEST_DIR: $DEST_DIR"
  
        echo "ACTION_DIR=action_dir" >> $GITHUB_ENV
        echo "IGNORE_FILE=action_dir/ignore_files.txt" >> $GITHUB_ENV
        echo "OUTPUT_DIR=output" >> $GITHUB_ENV
        echo "SYNC_FILE_LIST=output/files_to_sync.txt" >> $GITHUB_ENV
        echo "DEL_FILE_LIST=$CHECKOUT_DIR/deleted_files.txt" >> $GITHUB_ENV
        echo "REMOTE_DIR=/html/deployer" >> $GITHUB_ENV
        echo "SSH_USER=${{ inputs.ssh_user }}" >> $GITHUB_ENV
        echo "SSH_HOST=${{ inputs.remote_host }}" >> $GITHUB_ENV

        TAR_NAME="repository_$(openssl rand -hex 4).tar.gz"
        echo "TAR_NAME=$TAR_NAME" >> $GITHUB_ENV
        echo "TAR_FILE=output/$TAR_NAME" >> $GITHUB_ENV
        
        TEMP_KEY_FILE="private_key"
        echo "${{ inputs.ssh_private_key }}" > "$TEMP_KEY_FILE"
        chmod 600 "$TEMP_KEY_FILE"
        echo "TEMP_KEY_FILE=$TEMP_KEY_FILE" >> $GITHUB_ENV
        
        SSH_AUTH="-i $TEMP_KEY_FILE -o StrictHostKeyChecking=no"
        echo "SSH_AUTH=$SSH_AUTH" >> $GITHUB_ENV

        ls -lha

    - name: Validate inputs
      shell: bash
      run: |
        SOURCE=${{ inputs.source_path }}
        if [ ! -d "$SOURCE" ]; then
          echo "The source directory does not exists."
          exit 1
        fi

    - name: Checkout Action
      with:
        path: action_dir
        repository: narethiya-godaddy/git-deploy-poc # TODO: Change this on prod
        ref: ${{ steps.config.outputs.ACTION_TAG }}
      uses: actions/checkout@v3

    - name: Prepare changed and deleted lists
      shell: bash
      run: |
        EXCLUDE_ARGS=""
        while IFS= read -r line; do
          EXCLUDE_ARGS+="--exclude=$line "
        done < "$IGNORE_FILE"
        
        echo "ignore list: $EXCLUDE_ARGS"
        echo "Preparing a changed file list..."
        echo "Source: $CHECKOUT_DIR/"
        echo "Destination: /html/$DEST_DIR/"
        echo 'rsync command'
        echo "rsync -av --dry-run --checksum -e ssh $SSH_AUTH $CHECKOUT_DIR/ $SSH_USER@$SSH_HOST:/html/$DEST_DIR/"
        rsync -av --dry-run --checksum -e "ssh $SSH_AUTH" $EXCLUDE_ARGS $CHECKOUT_DIR/ "$SSH_USER@$SSH_HOST:/html/$DEST_DIR/" | grep -v '/$' > $SYNC_FILE_LIST
        sed -i '1d;N;$!P;$!D;$d;$d' "$SYNC_FILE_LIST"

        echo "Files to be synchronized:"
        cat "$SYNC_FILE_LIST"
        echo "--------End of list--------"
        
        echo "Preparing a deleted file list..."
        touch $DEL_FILE_LIST
        echo "rsync -av --dry-run --delete --ignore-existing -e 'ssh $SSH_AUTH' $CHECKOUT_DIR/ '$SSH_USER@$SSH_HOST:/html/$DEST_DIR/' | grep '^deleting ' | awk '{print $2}' | grep -v '/$' > $DEL_FILE_LIST"
        rsync -av --dry-run --delete --ignore-existing -e "ssh $SSH_AUTH" $EXCLUDE_ARGS $CHECKOUT_DIR/ "$SSH_USER@$SSH_HOST:/html/$DEST_DIR/" | grep '^deleting ' | awk '{print $2}' | grep -v '/$' > $DEL_FILE_LIST || true
        echo $(basename "$SYNC_FILE_LIST") >> "$SYNC_FILE_LIST"

        echo "Files to be DELETED:"
        cat "$DEL_FILE_LIST"
        echo "--------End of deleted file list--------"

    - name: Create tar file
      shell: bash
      run: |
        BASE_DIR=$(pwd)
        cd $CHECKOUT_DIR
        echo "Creating tar file: $TAR_FILE"
        tar -czvf "$BASE_DIR/$TAR_FILE" -T "$BASE_DIR/$SYNC_FILE_LIST"
        cd $BASE_DIR
        echo "Tar file created successfully."

    - name: Upload tar file to server
      shell: bash
      run: |
        echo "Creating remote directory: $REMOTE_DIR"
        ssh $SSH_AUTH "$SSH_USER@$SSH_HOST" "mkdir -p '$REMOTE_DIR' || exit 1"
        echo "Uploading tar file to $REMOTE_DIR"

        rsync -avz -e "ssh $SSH_AUTH" $TAR_FILE "$SSH_USER@$SSH_HOST:$REMOTE_DIR/"
        echo "Tar file uploaded successfully."

    - name: Clean up
      shell: bash
      run: |
        echo "Cleaning up temporary files..."
        rm -rf $OUTPUT_DIR $ACTION_DIR
        echo "Temporary files cleaned up successfully."

    - name: Run Deployer
      shell: bash
      run: |
        echo "Run Server deployer"
        COMMAND=${{inputs.post_deploy_commands}}
        CLEAN_UP=${{inputs.cleanup_deleted_files}}
        HEALTH_CHECK=${{inputs.enable_health_check}}

        ssh $SSH_AUTH "$SSH_USER@$SSH_HOST" "/html/deployer.sh $DEST_DIR $TAR_NAME $CLEAN_UP $HEALTH_CHECK $COMMAND || exit 1"
        rm -f $TEMP_KEY_FILE
